#include "../common.h"

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if(grid.size()==0||grid[0].size()==0)
            return 0;
        idx = 0;

            
        int m = grid.size();
        int n = grid[0].size();

        for(int i=0;i<m;i++){
            vector<int> tmp;
            for(int j=0;j<n;j++){
                tmp.push_back(0);
            }
            visit.push_back(tmp);
        }

        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j] == '1' && !visit[i][j]){
                    search(grid, i,j);
                }

            }
        
        }
        
        return idx;
        
        
    }

    void search(const vector<vector<char>> grid, int i, int j){
//        int c =0;
         visit[i][j] = idx;
        int m = grid.size();
        int n = grid[0].size();
        idx ++;
        queue<tuple<int,int>> q_;
        q_.push(make_tuple(i,j));
        while(!q_.empty()){
            auto node = q_.front();
            q_.pop();
            int i=get<0>(node), j = get<1>(node);


            if(i-1>=0 && grid[i-1][j]=='1' && !visit[i-1][j] ){
                visit[i-1][j] = idx;
                q_.push(make_tuple(i-1,j));
            }
            if(i+1<m && grid[i+1][j] == '1' && !visit[i+1][j]){
                visit[i+1][j] = idx;
                q_.push(make_tuple(i+1,j));
            }
            if(j-1>=0 && grid[i][j-1]=='1' && !visit[i][j-1] ){
                visit[i][j-1] = idx;
                q_.push(make_tuple(i,j-1));
            }
            if(j+1<n && grid[i][j+1] == '1' && !visit[i][j+1]){
                visit[i][j+1] = idx;
                q_.push(make_tuple(i,j+1));
            }
        }

    }

    int idx;
    vector<vector<int>> visit;
};

int main(){

    Solution s ;

//    vector<vector<char>> grid = {
//        {'1','1','0','0','0'},
//        {'1','1','0','0','0'},
//        {'0','0','1','0','0'},
//        {'0','0','0','1','1'}
//    };
    vector<vector<char>> grid = {
        {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
        {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
        {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
        {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
        {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}};
    cout << s.numIslands(grid)<<endl;


}
